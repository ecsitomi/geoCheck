import streamlit as st
import json
import os
from main import analyze_urls_enhanced, GEOAnalyzer
from report import generate_html_report, generate_csv_export
from advanced_reporting import AdvancedReportGenerator  
import time
from config import GOOGLE_API_KEY, OPENAI_API_KEY

st.set_page_config(
    page_title="GEOcheck",
    page_icon="üöÄ",
    layout="wide"
)

st.title("üöÄ GEOcheck")
st.markdown("**Generative Engine Optimization** website elemz≈ë rendszer AI & ML t√°mogat√°ssal")

# Sidebar be√°ll√≠t√°sok
st.sidebar.header("‚öôÔ∏è Be√°ll√≠t√°sok")

api_key = GOOGLE_API_KEY

use_ai_evaluation = st.sidebar.checkbox(
    "AI tartalom √©rt√©kel√©s",
    value=True,
    help="AI-alap√∫ tartalom min≈ës√©g √©rt√©kel√©s bekapcsol√°sa"
)

use_cache = st.sidebar.checkbox(
    "Intelligens cache",
    value=True,
    help="Eredm√©nyek cache-el√©se a gyorsabb feldolgoz√°s√©rt"
)

force_refresh = st.sidebar.checkbox(
    "Cache kihagy√°sa",
    value=False,
    help="Minden URL √∫jraelemz√©se cache mell≈ëz√©s√©vel"
)

skip_pagespeed = st.sidebar.checkbox(
    "PageSpeed √°tugr√°sa", 
    value=not bool(api_key),
    help="Gyorsabb elemz√©s PageSpeed n√©lk√ºl"
)

parallel_processing = st.sidebar.checkbox(
    "P√°rhuzamos feldolgoz√°s", 
    value=True,
    help="T√∂bb URL egyidej≈± elemz√©se (gyorsabb)"
)

max_workers = st.sidebar.slider(
    "P√°rhuzamos sz√°lak sz√°ma",
    min_value=1,
    max_value=5,
    value=2,
    help="T√∂bb sz√°l = gyorsabb, de t√∂bb terhel√©s"
)



# Cache st√°tusz megjelen√≠t√©se
if use_cache:
    st.sidebar.subheader("üíæ Cache √°llapot")
    if st.sidebar.button("Cache statisztik√°k"):
        try:
            analyzer = GEOAnalyzer(use_cache=True)
            cache_stats = analyzer.get_cache_stats()
            if cache_stats.get('cache_enabled'):
                st.sidebar.success(f"Cache f√°jlok: {cache_stats.get('total_files', 0)}")
                st.sidebar.info(f"M√©ret: {cache_stats.get('total_size_mb', 0)} MB")
            else:
                st.sidebar.warning("Cache nem el√©rhet≈ë")
        except Exception as e:
            st.sidebar.error(f"Cache hiba: {e}")
    
    if st.sidebar.button("Cache tiszt√≠t√°s"):
        try:
            analyzer = GEOAnalyzer(use_cache=True)
            clear_result = analyzer.clear_all_cache()
            if clear_result.get('status') == 'success':
                st.sidebar.success(f"‚úÖ {clear_result.get('message', 'Cache t√∂r√∂lve')}")
            else:
                st.sidebar.error(f"‚ùå {clear_result.get('message', 'Ismeretlen hiba')}")
        except Exception as e:
            st.sidebar.error(f"Tiszt√≠t√°s hiba: {e}")

# F≈ëoldal
col1, col2 = st.columns([3, 2])

with col1:
    st.header("üìù URL-ek megad√°sa")
    
    # URL input m√≥dok
    input_method = st.radio(
        "Bevitel m√≥dja:",
        ["Sz√∂veges lista", "F√°jl felt√∂lt√©s"]
    )
    
    if input_method == "Sz√∂veges lista":
        urls_text = st.text_area(
            "URL-ek (soronk√©nt egy URL):",
            height=200,
            placeholder="https://example.com\nhttps://another-site.com\nhttps://third-site.com"
        )
        url_list = [url.strip() for url in urls_text.split('\n') if url.strip()]
    
    else:
        uploaded_file = st.file_uploader(
            "URL lista felt√∂lt√©se",
            type=['txt', 'csv'],
            help="Soronk√©nt egy URL a f√°jlban"
        )
        
        url_list = []
        if uploaded_file:
            content = str(uploaded_file.read(), "utf-8")
            url_list = [url.strip() for url in content.split('\n') if url.strip()]

with col2:
    st.header("üìä Elemz√©s ind√≠t√°sa")
    st.markdown("""
     
    """)
    if st.button("‚ñ∂Ô∏è GEO Elemz√©s kezd√©se", type="primary"):
        if not url_list:
            st.error("‚ùå Nem adt√°l meg URL-eket!")
        else:
            # Progress bar √©s status
            progress_bar = st.progress(0)
            status_text = st.empty()
            try:
                # Id≈ëm√©r√©s kezd√©se
                start_time = time.time()
                
                status_text.text("üöÄ Enhanced elemz√©s inicializ√°l√°sa...")
                progress_bar.progress(10)
                
                # F√°jln√©v gener√°l√°s timestamp-pel
                timestamp = time.strftime("%Y%m%d_%H%M%S")
                json_filename = f"geo_enhanced_analysis_{timestamp}.json"
                html_filename = f"geo_enhanced_report_{timestamp}.html"
                
                status_text.text("üß† GEO elemz√©se folyamatban...")
                progress_bar.progress(20)
                
                # Enhanced elemz√©s futtat√°sa
                analyze_urls_enhanced(
                    url_list=url_list,
                    api_key=api_key if not skip_pagespeed else None,
                    output_file=json_filename,
                    parallel=parallel_processing,
                    skip_pagespeed=skip_pagespeed,
                    max_workers=max_workers if parallel_processing else 1,
                    use_cache=use_cache,
                    use_ai=use_ai_evaluation,
                    force_refresh=force_refresh
                )
                
                progress_bar.progress(70)
                status_text.text("üìã AI jelent√©s lek√©r√©se...")
                
                # HTML jelent√©s
                generate_html_report(json_filename, html_filename)
                
                progress_bar.progress(90)
                status_text.text("üìä CSV export...")
                
                # CSV export
                csv_filename = f"geo_enhanced_export_{timestamp}.csv"
                generate_csv_export(json_filename, csv_filename)
                
                progress_bar.progress(100)
                
                # Sikeres befejez√©s
                elapsed_time = time.time() - start_time
                status_text.text(f"‚úÖ GEO elemz√©s befejezve! ({elapsed_time:.1f} m√°sodperc)")
                
                # Download gombok
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    with open(json_filename, 'rb') as f:
                        st.download_button(
                            "üìÑ JSON jelent√©s let√∂lt√©se",
                            f,
                            file_name=json_filename,
                            mime="application/json"
                        )
                
                with col2:
                    with open(html_filename, 'rb') as f:
                        st.download_button(
                            "üìä HTML jelent√©s let√∂lt√©se",
                            f,
                            type="primary",
                            file_name=html_filename,
                            mime="text/html"
                        )
                
                with col3:
                    with open(csv_filename, 'rb') as f:
                        st.download_button(
                            "üìà CSV jelent√©s let√∂lt√©se",
                            f,
                            file_name=csv_filename,
                            mime="text/csv"
                        )
            
            except Exception as e:
                st.error(f"‚ùå Hiba t√∂rt√©nt az enhanced elemz√©s sor√°n: {str(e)}")
                status_text.text("‚ùå Enhanced elemz√©s megszak√≠tva")
                import traceback
                st.code(traceback.format_exc())

col1, col2 = st.columns([1, 1])

with col1:
# Inform√°ci√≥s szekci√≥
    with st.expander("üöÄ GEOcheck - Teljes funkcionalit√°s ‚ÑπÔ∏è"):
        st.markdown("""
                    
        #### üéØ GEO (Generative Engine Optimization) Defin√≠ci√≥:
        
        A **Generative Engine Optimization** az AI-alap√∫ keres≈ëmotorok √©s chatbotok (ChatGPT, Claude, Gemini, Bing Chat) sz√°m√°ra val√≥ tartalom optimaliz√°l√°s. C√©lja hogy a tartalom megjelenjen AI v√°laszokban √©s hivatkoz√°sk√©nt szolg√°ljon.
        
        **üöÄ Val√≥s AI Integr√°ci√≥ (OpenAI GPT-4o-mini):**
        - **AI Content Evaluation**: Val√≥s OpenAI API-val tartalom min≈ës√©g √©rt√©kel√©s
        - **AI Readability Score**: Clarity, Engagement, Structure, AI Friendliness metrik√°k
        - **AI Factual Check**: Faktualit√°s, hivatkoz√°sok, citations, confidence elemz√©s
        - **Platform-specific AI Evaluation**: ChatGPT, Claude, Gemini, Bing Chat optimaliz√°l√°s
        - **Semantic Relevance**: Kulcsszavak szemantikai relevancia m√©r√©se
        - **Fallback Heuristics**: Ha API nem el√©rhet≈ë, intelligens fallback algoritmusok
        
        **üß† Machine Learning Motor (Scikit-learn):**
        - **Random Forest & Gradient Boosting**: Platform kompatibilit√°s el≈ërejelz√©s
        - **Feature Engineering**: 20+ sz√∂veges jellemz≈ë automatikus kinyer√©se
        - **Hybrid Scoring**: (Hagyom√°nyos + ML + AI) s√∫lyozott kombin√°ci√≥ja
        - **Confidence Levels**: ML bizonyoss√°gi szintek (High/Medium/Low)
        - **Feature Importance**: Mely t√©nyez≈ëk a legfontosabbak platformonk√©nt
        - **Model Persistence**: Betan√≠tott modellek ment√©se √©s bet√∂lt√©se
        
        **üèóÔ∏è Enhanced Schema Validation:**
        - **Google Rich Results Test**: Val√≥s Google valid√°tor szimul√°ci√≥
        - **Schema.org Compliance**: 50+ schema t√≠pus teljes valid√°ci√≥ja
        - **Rich Results Eligibility**: FAQ, Article, Product, HowTo t√°mogat√°s
        - **Schema Effectiveness**: CTR impact √©s AI understanding m√©r√©s
        - **Dynamic Recommendations**: Automatikus schema javaslatok
        - **JSON-LD, Microdata, RDFa**: Minden form√°tum t√°mogat√°sa
        
        **üíæ Intelligens Cache Rendszer:**
        - **File-based Caching**: Redis-mentes, egyszer≈± deployment
        - **TTL Management**: Automatikus cache lej√°rat kezel√©s (1 √≥ra)
        - **Versioning**: Cache verzi√≥kezel√©s kompatibilit√°shoz
        - **Cache Statistics**: Teljes√≠tm√©ny √©s tal√°lati ar√°ny m√©r√©s
        - **Intelligent Invalidation**: Automatikus cache t√∂rl√©s lej√°ratkor
        - **Force Refresh**: Manual cache bypass lehet≈ës√©g
        
        **üìä Fejlett Tartalom Elemz√©s:**
        - **Content Quality Analyzer**: Olvashat√≥s√°g, kulcssz√≥ s≈±r≈±s√©g, szemantikai gazdags√°g
        - **AI-Specific Metrics**: 8 AI-readiness metrika (structure, qa_format, entities, stb.)
        - **Authority Signals**: Szerz≈ë info, publik√°l√°si d√°tum, szakmai terminol√≥gia
        - **Semantic Richness**: Entit√°sok, domain expertise, kapcsolatok
        - **Readability Scores**: Flesch score, mondathossz, sz√≥kincs gazdags√°g
        
        **üéØ Multi-Platform Optimization:**
        - **ChatGPT Optimizer**: L√©p√©senk√©nti √∫tmutat√≥k, list√°k, gyakorlati tartalom
        - **Claude Optimizer**: R√©szletes kontextus, hivatkoz√°sok, √°rnyalt magyar√°zatok  
        - **Gemini Optimizer**: Friss inform√°ci√≥k, multim√©dia, struktur√°lt adatok
        - **Bing Chat Optimizer**: Forr√°sok, k√ºls≈ë hivatkoz√°sok, id≈ëszer≈± tartalom
        - **Platform Scoring**: Hagyom√°nyos + ML + AI triple hybrid rendszer
        
        **üîß Auto-Fix Generator:**
        - **Meta Tag Templates**: Title, description, keywords optimaliz√°l√°s
        - **Schema Templates**: Organization, Article, FAQ, Product automatikus gener√°l√°s
        - **Platform-specific Fixes**: Egyedi jav√≠t√°si javaslatok platformonk√©nt
        - **Priority Scoring**: Jav√≠t√°sok fontoss√°gi sorrendben
        - **Code Generation**: K√©sz HTML/JSON-LD k√≥d gener√°l√°s
        
        **‚ö° PageSpeed Insights Integr√°ci√≥ (Google API):**
        - **Mobile & Desktop Teljes√≠tm√©ny**: Val√≥s Google PageSpeed API m√©r√©sek
        - **Core Web Vitals**: LCP, FID, CLS metrik√°k r√©szletes elemz√©se
        - **Performance Scoring**: 0-100 pontsz√°m mobil √©s desktop verzi√≥ra
        - **SEO Technical Score**: Technikai SEO t√©nyez≈ëk Google √©rt√©kel√©se
        - **Visual Indicators**: Sz√≠nk√≥dolt eredm√©nyek (j√≥/jav√≠tand√≥/gyenge)
        - **Performance Impact**: Teljes√≠tm√©ny hat√°sa AI platform rangsorol√°sra
        - **Optimization Tips**: Automatikus teljes√≠tm√©ny jav√≠t√°si javaslatok
        
        **üìà Advanced Reporting:**
        - **Executive Summary**: C-level d√∂nt√©shoz√≥i √∂sszefoglal√≥
        - **Technical Audit**: Fejleszt≈ëi r√©szletes technikai jelent√©s
        - **Competitor Analysis**: Versenyt√°rselemz√©s √©s √∂sszehasonl√≠t√°s
        - **Action Plan**: Konkr√©t l√©p√©senk√©nti cselekv√©si terv
        - **Progress Tracking**: Fejl≈ëd√©s k√∂vet√©se id≈ëben
        - **Multi-format Export**: HTML, JSON, CSV jelent√©sek
        
        
        ### ‚öôÔ∏è Technikai Architekt√∫ra:
        
        **Modul√°ris Fel√©p√≠t√©s:**
        - `main.py`: Core analyzer, threading, cache integration
        - `ai_evaluator.py`: OpenAI API integration, AI scoring
        - `platform_optimizer.py`: ML models, platform-specific algorithms  
        - `schema_validator.py`: Schema.org validation, Google Rich Results
        - `content_analyzer.py`: Text analysis, quality metrics
        - `cache_manager.py`: File-based caching system
        - `auto_fixes.py`: Fix generation, code templates
        - `advanced_reporting.py`: Multi-format report generation
        - `ai_metrics.py`: AI-readiness specific metrics
        
        """)
with col2:
    # ML szerepe √©s m≈±k√∂d√©se
    with st.expander("üß† Machine Learning a GEO Check alkalmaz√°sban ‚ÑπÔ∏è"):
        st.markdown("""

        #### **1. üìä Platform Kompatibilit√°s El≈ërejelz√©s**
        Az ML modell **platform-specifikus pontsz√°mokat** j√≥sol meg:
        - **ChatGPT, Claude, Gemini, Bing Chat** kompatibilit√°si pontsz√°mok
        - A hagyom√°nyos algoritmus mellett **m√°sodik v√©lem√©ny** ny√∫jt√°sa
        - **Hybrid Score** = (Hagyom√°nyos + ML) / 2

        #### **2. üéØ Mib≈ël tanul az ML?**
        Az ML modell **sz√∂veg jellemz≈ëket** elemez:
        - **Sz√∂veg hossza** √©s strukt√∫r√°ja
        - **Bekezd√©sek sz√°ma** √©s eloszl√°sa
        - **List√°k, t√°bl√°zatok** megl√©te
        - **C√≠msorok hierarchi√°ja** (H1-H6)
        - **Kulcsszavak gyakoris√°ga**
        - **Mondathossz √°tlagok**
        - **Szakmai terminol√≥gia** s≈±r≈±s√©ge

        #### **3. üîÆ Hogyan m≈±k√∂dik?**
        1. **Betan√≠t√°s**: Sok weboldalon **"k√©zi √©rt√©kel√©sek"** alapj√°n tanul
        2. **Feature extraction**: A sz√∂vegb≈ël **sz√°mszer≈± jellemz≈ëket** von ki
        3. **Predikci√≥**: √öj oldalakra **pontsz√°mot j√≥sol** (0-100)
        4. **Valid√°ci√≥**: **Confidence level** - mennyire biztos az eredm√©nyben

        #### **4. üìà Pontsz√°m kombin√°ci√≥:**
        ```
        Hybrid Score = (Hagyom√°nyos algoritmus + ML j√≥slat) / 2
        ```

        **P√©lda**:
        - Hagyom√°nyos ChatGPT score: 40
        - ML ChatGPT score: 60  
        - **Hybrid score: 50**

        #### **5. üé® ML Confidence (biztons√°g):**
        - **High**: <10 pont k√ºl√∂nbs√©g (ML √©s hagyom√°nyos k√∂z√∂tt)
        - **Medium**: 10-20 pont k√ºl√∂nbs√©g
        - **Low**: >20 pont k√ºl√∂nbs√©g

        #### **6. üîç Feature Importance:**
        Az ML **megmondja** hogy melyik jellemz≈ë **mennyire fontos** az egyes platformoknak:
        - **ChatGPT**: list√°k, l√©p√©sek fontosak
        - **Claude**: hossz√∫ sz√∂veg, hivatkoz√°sok
        - **Gemini**: frissess√©g, struktur√°lts√°g
        - **Bing**: forr√°sok, k√ºls≈ë linkek

        #### **7. üöÄ Mi√©rt hasznos ez?**
        - **Objekt√≠vebb √©rt√©kel√©s**: Nem csak szab√°ly-alap√∫
        - **Mint√°zat felismer√©s**: Rejtett √∂sszef√ºgg√©seket tal√°l
        - **Adaptivit√°s**: Id≈ëvel "tanul" √©s javul
        - **Komplexit√°s kezel√©s**: Sok t√©nyez≈ët egyszerre m√©rlegel

        #### **8. üí° Gyakorlati haszon:**
        Az ML **finom√≠tja** a hagyom√°nyos algoritmust - ha p√©ld√°ul egy oldal **szab√°ly szerint** j√≥ pontot kapna, de az **ML alacsony pontot** j√≥sol, akkor val√≥sz√≠n≈±leg **valami rejtett probl√©ma** van amit √©rdemes megvizsg√°lni!

        Ez teszi a rendszert **intelligensebb√©** √©s **pontosabb√°** a platform optimaliz√°l√°sban! üéØ
        """)

# Footer
st.markdown("---")
st.markdown("üöÄ **GEOcheck** | AI & ML t√°mogatott generativ engine optimaliz√°lt website ellen≈ërz≈ë rendszer | Fejlesztette: Ecsedi Tam√°s | 2025")